/*! cards 2015-08-26 */

function Card(a, b, c) {
    function d(a) {
        switch (a) {
          case 11:
            return "J";

          case 12:
            return "Q";

          case 13:
            return "K";

          case 14:
            return "A";

          default:
            return a;
        }
    }
    this.deck = a, this.value = b, this.suitValue = c.name, this.suit = c, this.rank = d(b), 
    this.selected = !1;
}

function Class(a, b, c, d) {
    function e(a, b) {
        for (v in b) b.hasOwnProperty(v) && (a[v] = b[v]);
    }
    function f(a, b) {
        var c = a[b];
        return delete a[b], c;
    }
    function g() {
        this.constructor = a;
    }
    return "object" == typeof a && (b = a, a = f(b, "$construct"), c = f(b, "$extends"), 
    d = f(b, "$describe")), c && (g.prototype = c.prototype, a.prototype = new g(), 
    a.$parent = c.prototype), console.log(a), e(a.prototype, b), d && Object.defineProperties(a.prototype, d), 
    a;
}

function $isType(a, b, c) {
    b instanceof Array || (b = [ b ]);
    for (var d = 0; d < b.length; d++) if (c && a instanceof b[d] || a.constructor == b[d]) return !0;
    return !1;
}

function $assertType(a, b, c) {
    if (b instanceof Array || (b = [ b ]), !$isType(a, b, c)) {
        var d = b.map(function(a) {
            return a.name;
        }).join("_or_");
        throw "NotOfType_" + d;
    }
}

function $lambda(a) {
    return function() {
        return a;
    };
}

function $extend(a) {
    arguments.shift(), $foreach(arguments, function(a, b) {}, this);
}

function $foreach(a, b, c) {
    if (void 0 === a || null === a || !a.constructor) return !1;
    switch (a.constructor.name) {
      case "Array":
        for (var d = a.length - 1; d >= 0; d--) b.call(c, a[d], d);
        break;

      case "Object":
        for (key in a) a.hasOwnProperty(key) && b.call(c, a[key], key);
    }
}

function $has(a, b) {
    return a instanceof Array ? a.indexOf(b) > -1 : !1;
}

function Deck(a) {
    this.shuffled = !1, this.cards = [], this.discards = [];
    for (var b = {
        0: {
            bit: 1,
            name: "hearts",
            code: "hearts",
            color: "red"
        },
        1: {
            bit: 2,
            name: "spades",
            code: "spades",
            color: "black"
        },
        2: {
            bit: 4,
            name: "diamonds",
            code: "diams",
            color: "red"
        },
        3: {
            bit: 8,
            name: "clubs",
            code: "clubs",
            color: "black"
        }
    }, c = 0; 4 > c; c++) for (var d = 2; 14 >= d; d++) this.cards.push(new Card(this, d, b[c]));
    a && this.shuffle();
}

function Hand(a, b) {
    this._assertType(a, Game), this._assertType(b, Player), this.game = a, this.player = b, 
    this.cards = [], this.strength = {};
}

function Player(a, b) {
    this.game = a, this.name = b, this.hand = new Hand(a, this);
}

Card.e = {
    NotInHand: $lambda("NotInHand")
}, Card.prototype.discard = function() {
    this.deck.discard(this);
}, Card.prototype.reset = function() {
    this.selected = !1;
}, Card.prototype.select = function(a) {
    a && $has(a.hand.cards, this) && (this.selected = !this.selected);
};

var BaseClass = new Class({
    $construct: function() {},
    _setProperty: function(a, b) {
        this[a] = b;
    },
    _setProperties: function(a) {
        $foreach(a, function(a, b) {
            this._setProperty(b, a);
        }, this);
    },
    _assertType: function(a, b) {
        if (!(a instanceof b)) throw console.log("Not a %s:", b.name, a, arguments.callee.caller.prototype), 
        "NotA" + b.name;
    }
}), $delay = setTimeout, $repeat = setInterval;

Deck.prototype = new BaseClass(), Deck.prototype.constructor = Deck, Deck.e = {
    wrongType: $lambda("NotADeck"),
    empty: $lambda("DeckIsEmpty")
}, Deck.prototype.shuffle = function() {
    for (var a = 2704; a > 0; a--) this.cards.reverse(), this.cards.push(this.drawCard(!0));
    this.shuffled = !0;
}, Deck.prototype.drawCard = function(a) {
    if (!this.cards.length) throw Deck.e.empty();
    if (a) {
        var b = Math.floor(Math.random() * this.cards.length - 1 + 1);
        return this.cards.splice(b, 1)[0];
    }
    return this.cards.pop();
}, Deck.prototype.discard = function(a) {
    this._assertType(a, Card), a.reset(), this.discards.push(a);
}, Deck.prototype.dealCard = function(a) {
    return this._assertType(a, Player), a.canBeDealt() ? (card = this.drawCard(), a.deal(card)) : void 0;
};

var Game = new Class({
    $extends: BaseClass,
    $construct: function() {
        this._setProperties({
            players: [],
            deck: null,
            dealer: null,
            turn: null
        }), this.rules = {
            handLength: 5
        };
    },
    addPlayer: function(a) {
        this._assertType(a, Player), this.players.push(a), !this.dealer && this.setDealer(a);
    },
    start: function() {
        this.deck = new Deck(!0), this.deal(), this.shiftTurn();
    },
    getRule: function(a) {
        return this.rules[a];
    },
    getNextPlayer: function(a) {
        this._assertType(a, Player);
        var b = this.players.indexOf(a);
        return this.players.length == b + 1 ? this.players[0] : this.players[b + 1];
    },
    getNextInTurn: function() {
        return this.getNextPlayer(this.turn || this.dealer);
    },
    setDealer: function(a) {
        this._assertType(a, Player), this.dealer = a;
    },
    getDealer: function(a) {
        return this._assertType(a, Player), this.dealer;
    },
    shiftDealer: function() {
        this.dealer = this.getNextPlayer(this.dealer);
    },
    shiftTurn: function() {
        this.turn = this.getNextInTurn();
    },
    compareHands: function(a, b) {
        if (!(a instanceof Hand)) throw Hand.e.wrongType();
        if (!(b instanceof Hand)) throw Hand.e.wrongType();
    },
    deal: function() {
        for (var a = !0; a; ) {
            a = !1;
            for (var b = 0; b < this.players.length; b++) {
                var c = this.players[b];
                this.dealPlayer(c) && (a = !0);
            }
        }
    },
    dealPlayer: function(a) {
        return this._assertType(a, Player), a.hand.cards.length < this.getRule("handLength") ? this.deck.dealCard(a) : void 0;
    },
    evaluateHand: function(a) {
        this._assertType(a, Hand);
        var b = [], c = [];
        a.cards.map(function(a) {
            b.push(a.value), c.push(a.suit.bit);
        });
        var d, e, f, g = 1 << b[0] | 1 << b[1] | 1 << b[2] | 1 << b[3] | 1 << b[4];
        for (e = -1, d = f = 0; 5 > e; e++, f = Math.pow(2, 4 * b[e])) d += f * ((d / f & 15) + 1);
        d = d % 15 - (g / (g & -g) == 31 || 16444 == g ? 3 : 1), d -= (c[0] == (c[1] | c[2] | c[3] | c[4])) * (31744 == g ? -5 : 1);
        var h = [ 7, 8, 4, 5, 0, 1, 2, 9, 3, 6 ], i = [ "4 of a Kind", "Straight Flush", "Straight", "Flush", "High Card", "1 Pair", "2 Pair", "Royal Flush", "3 of a Kind", "Full House" ];
        return {
            value: d,
            rank: h[d],
            suit: 1 == d || 3 == d ? c[0] : null,
            high: Math.max.apply(null, b),
            string: i[d] + (16444 == g ? " (Ace low)" : "")
        };
    }
});

Hand.prototype = new BaseClass(), Hand.prototype.constructor = Hand, Hand.prototype.addCard = function(a) {
    this._assertType(a, Card), this.cards.push(a);
}, Hand.prototype.discardCard = function(a) {
    this._assertType(a, Card);
    var b = this.cards.indexOf(a);
    if (!(b > -1)) throw Card.e.NotInHand();
    this.cards.splice(b, 1)[0].discard();
}, Hand.prototype.swapCards = function() {
    for ($foreach(this.cards, function(a) {
        a.selected && this.discardCard(a);
    }, this); this.cards < this.game.getRule("handLength"); ) ;
}, Player.e = {
    wrongType: $lambda("NotAPlayer")
}, Player.prototype.giveHand = function(a) {
    if (!(a instanceof Hand)) throw Hand.e.wrongType();
    a.owner = this;
}, Player.prototype.foldHand = function() {
    this.hand = null;
}, Player.prototype.canBeDealt = function() {
    return this.hand.cards.length < this.game.getRule("handLength");
}, Player.prototype.deal = function(a) {
    if (!(a instanceof Card)) throw Card.e.wrongType();
    return this.hand.addCard(a), !0;
};
//# sourceMappingURL=cards.min.js.map